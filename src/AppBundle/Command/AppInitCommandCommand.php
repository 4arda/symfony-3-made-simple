<?php

namespace AppBundle\Command;

use AppBundle\Entity\Parameter;
use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ChoiceQuestion;
use Symfony\Component\Console\Question\Question;
use Symfony\Component\Filesystem\Filesystem;

class AppInitCommandCommand extends ContainerAwareCommand
{
    protected function configure()
    {
        $this
            ->setName('app:initCommand')
            ->setDescription('Init Parameters')
            ->addOption('name', 'a', InputOption::VALUE_REQUIRED)



        ;
    }

    protected  function interact(InputInterface $input, OutputInterface $output)
    {
        parent::interact($input, $output); // TODO: Change the autogenerated stub
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {

        $this->createSchema();

        $output->writeln('Create Admin User');

        //LOGIN
        $helper = $this->getHelper('question');
        $question1 = new Question("Login : ");
        $login = $helper->ask($input, $output, $question1);

        if(!$login)
            return;

        //PASSWORD
        $question2 = new Question("Password : ");
        $question2->setHidden(true);
        $question2->setHiddenFallback(false);
        $pasword = $helper->ask($input, $output, $question2);

        if(!$pasword)
            return;

        //EMAIL
        $question3 = new Question("Email : ");
        $email = $helper->ask($input, $output, $question3);

        if(!$pasword)
            return;

        $output->writeln('Admin création...');
        $this->createUser($login, $pasword, $email);
        $output->writeln('Done!');

        //DATABASE TYPE
        $question7 = new ChoiceQuestion(
            'What database do you use ?',
            array('mysql', 'postgreSql', 'microsoftSql'),
            0
        );
        $base = $helper->ask($input, $output, $question7);
        if(!$base)
            return;

        $output->writeln('');
        $output->writeln('Sessions table creation...');
        $this->createSessionTable($base);
        $output->writeln('Done!');

        //SITE NAME
        $question4 = new Question("Website Name : ");
        $nomSite = $helper->ask($input, $output, $question4);

        //SITE DESCRIPTION
        $question5 = new Question("Website description (Meta) : ");
        $descriptionSite = $helper->ask($input, $output, $question5);

        //EMAIL
        $question6 = new Question("Website contact Email : ");
        $emailContact = $helper->ask($input, $output, $question6);

        $output->writeln('Settings creation...');
        $this->createParameters($nomSite,$descriptionSite,$emailContact);
        $output->writeln('Done!');

        $fs = new Filesystem();

        $themeFolder = $this->getContainer()->get('kernel')->getRootDir()."/Resources/views/themes";
        $defaultTheme = $themeFolder."/default";

        $fs->mkdir($themeFolder);
        $fs->mkdir($defaultTheme);
        
        $fs->symlink($defaultTheme.'/assets/',$this->getContainer()->get('kernel')->getRootDir().'/../web/themes/default/assets');

        $output->writeln("it's Good !!");

    }

    public function createUser($login, $pasword, $email){
        $this->getContainer()->get('fos_user.util.user_manipulator')->create($login, $pasword, $email, 1, 1);
    }


    public function createSessionTable($response){

        $em         = $this->getContainer()->get("doctrine.orm.entity_manager");

        $mysql      = $this->getMysqlSessionScript();
        $postgreSQL = $this->getPostgrSessionScript();
        $mssql      = $this->getMsSessionScript();

        if($response == "mysql")
            $queryBase = $mysql;
        elseif ($response == "postgreSql")
            $queryBase = $postgreSQL;
        elseif ($response == "")
            $queryBase = $mssql;

        $em->getConnection()->exec($queryBase);

    }

    public function createParameters($nomSite,$descriptionSite,$emailContact){

        $em         = $this->getContainer()->get("doctrine.orm.entity_manager");

        $settings = [];
        $settings[]  = $this->createParameter('site_name','Website name',$nomSite);
        $settings[]  = $this->createParameter('site_description','Website description',$descriptionSite);
        $settings[]  = $this->createParameter('site_email','Website email',$emailContact);
        $settings[]  = $this->createParameter('allow_anonymous_comments','Allow anonymous comments','1');
        $settings[]  = $this->createParameter('validated_comments_by_defaut','By default, comments are published without modération','1');
        $settings[]  = $this->createParameter('tracking_code','Analitycs tracking code','');
        $settings[]  = $this->createParameter('default_route','Default route','');

        foreach ($settings as $setting)
            $em->persist($setting);

        $em->flush();

    }

    public function createParameter($cle,$label,$value = ''){
        $parameter = new Parameter();
        $parameter->setCle($cle);
        $parameter->setLabel($label);
        $parameter->setValeur($value ? $value : '');
        return $parameter;
    }


    public function getMysqlSessionScript(){
        return "
                CREATE TABLE `sessions` (
                `sess_id` VARBINARY(128) NOT NULL PRIMARY KEY,
                `sess_data` BLOB NOT NULL,
                `sess_time` INTEGER UNSIGNED NOT NULL,
                `sess_lifetime` MEDIUMINT NOT NULL
            ) COLLATE utf8_bin, ENGINE = InnoDB;
         ";
    }

    public function getPostgrSessionScript(){
        return  "CREATE TABLE sessions (
                sess_id VARCHAR(128) NOT NULL PRIMARY KEY,
                sess_data BYTEA NOT NULL,
                sess_time INTEGER NOT NULL,
                sess_lifetime INTEGER NOT NULL
            )";
    }

    public function getMsSessionScript(){
        return "CREATE TABLE [dbo].[sessions](
            [sess_id] [nvarchar](255) NOT NULL,
            [sess_data] [ntext] NOT NULL,
            [sess_time] [int] NOT NULL,
            [sess_lifetime] [int] NOT NULL,
            PRIMARY KEY CLUSTERED(
                [sess_id] ASC
            ) WITH (
                PAD_INDEX  = OFF,
                STATISTICS_NORECOMPUTE  = OFF,
                IGNORE_DUP_KEY = OFF,
                ALLOW_ROW_LOCKS  = ON,
                ALLOW_PAGE_LOCKS  = ON
            ) ON [PRIMARY]
            ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]";
    }

    public function createSchema(){

        $kernel = $this->getContainer()->get('kernel');
        $application = new \Symfony\Bundle\FrameworkBundle\Console\Application($kernel);
        $application->setAutoExit(false);
        $options = array('command' => 'doctrine:schema:create');
        $application->run(new \Symfony\Component\Console\Input\ArrayInput($options));

    }



}
